-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.academicqualifications
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    school character varying(100) COLLATE pg_catalog."default",
    degree character varying(50) COLLATE pg_catalog."default",
    place character varying(255) COLLATE pg_catalog."default",
    from_date date,
    to_date date,
    option character varying(255) COLLATE pg_catalog."default",
    status character varying(100) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT academicqualifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.coursesandtraining
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    course_name character varying(100) COLLATE pg_catalog."default",
    from_date date,
    to_date date,
    place character varying(100) COLLATE pg_catalog."default",
    status character varying(100) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT coursesandtraining_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.databasechangelog
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    author character varying(255) COLLATE pg_catalog."default" NOT NULL,
    filename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    dateexecuted timestamp without time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) COLLATE pg_catalog."default" NOT NULL,
    md5sum character varying(35) COLLATE pg_catalog."default",
    description character varying(255) COLLATE pg_catalog."default",
    comments character varying(255) COLLATE pg_catalog."default",
    tag character varying(255) COLLATE pg_catalog."default",
    liquibase character varying(20) COLLATE pg_catalog."default",
    contexts character varying(255) COLLATE pg_catalog."default",
    labels character varying(255) COLLATE pg_catalog."default",
    deployment_id character varying(10) COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.databasechangeloglock
(
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp without time zone,
    lockedby character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT databasechangeloglock_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.deploymentdata
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    div character varying(50) COLLATE pg_catalog."default",
    bde character varying(50) COLLATE pg_catalog."default",
    btn character varying(50) COLLATE pg_catalog."default",
    regiment character varying(50) COLLATE pg_catalog."default",
    appointment character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT deploymentdata_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.disciplinestatus
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    title character varying(100) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    date date,
    attachment text COLLATE pg_catalog."default",
    type character varying(20) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT disciplinestatus_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.emergencycontact
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    firstname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(20) COLLATE pg_catalog."default",
    relationship character varying(50) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT emergencycontact_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.medicaldata
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    blood_group character varying(5) COLLATE pg_catalog."default",
    mmi_number character varying(50) COLLATE pg_catalog."default",
    height integer,
    weight integer,
    personnel_id uuid NOT NULL,
    CONSTRAINT medicaldata_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.militaryinfo
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    doe date,
    poe character varying(100) COLLATE pg_catalog."default",
    css_acc_no character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid,
    CONSTRAINT militaryinfo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.nextofkinaddress
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    nationalid bigint,
    firstname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(20) COLLATE pg_catalog."default",
    province character varying(50) COLLATE pg_catalog."default",
    district character varying(50) COLLATE pg_catalog."default",
    sector character varying(50) COLLATE pg_catalog."default",
    cell character varying(50) COLLATE pg_catalog."default",
    village character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT nextofkinaddress_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.peacekeepingmission
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default",
    type character varying(50) COLLATE pg_catalog."default",
    location character varying(100) COLLATE pg_catalog."default",
    from_date date,
    to_date date,
    unity character varying(50) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT peacekeepingmission_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.permission_role
(
    role_id bigint NOT NULL,
    permission_id bigint NOT NULL,
    CONSTRAINT permission_role_pkey PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.permissions
(
    id bigserial NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    requires_verification boolean DEFAULT false,
    CONSTRAINT permissions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.personnel
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    service_number integer NOT NULL,
    rank character varying(50) COLLATE pg_catalog."default",
    firstname character varying(50) COLLATE pg_catalog."default",
    lastname character varying(50) COLLATE pg_catalog."default",
    currentunit character varying(50) COLLATE pg_catalog."default",
    dob date,
    place_of_birth character varying(100) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    marital_status character varying(10) COLLATE pg_catalog."default",
    fathername character varying(50) COLLATE pg_catalog."default",
    mothername character varying(50) COLLATE pg_catalog."default",
    religious character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT personnel_pkey PRIMARY KEY (id),
    CONSTRAINT personnel_service_number_key UNIQUE (service_number)
);

CREATE TABLE IF NOT EXISTS public.promotionrecord
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    former_rank character varying(50) COLLATE pg_catalog."default",
    from_date date,
    to_date date,
    new_rank character varying(50) COLLATE pg_catalog."default",
    date_of_promotion date,
    personnel_id uuid NOT NULL,
    CONSTRAINT promotionrecord_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.residenceaddress
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    nationalid bigint,
    contact character varying(20) COLLATE pg_catalog."default",
    province character varying(50) COLLATE pg_catalog."default",
    district character varying(50) COLLATE pg_catalog."default",
    sector character varying(50) COLLATE pg_catalog."default",
    cell character varying(50) COLLATE pg_catalog."default",
    village character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT residenceaddress_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id bigserial NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.soldierskit
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    bdu character varying(50) COLLATE pg_catalog."default",
    officedress character varying(50) COLLATE pg_catalog."default",
    jungleboots character varying(50) COLLATE pg_catalog."default",
    plasticboots character varying(50) COLLATE pg_catalog."default",
    officeshoes character varying(50) COLLATE pg_catalog."default",
    bdusize character varying(20) COLLATE pg_catalog."default",
    officedresssize character varying(20) COLLATE pg_catalog."default",
    junglebootssize character varying(20) COLLATE pg_catalog."default",
    plasticbootssize character varying(20) COLLATE pg_catalog."default",
    officeshoessize character varying(20) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT soldierskit_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.spouseaddress
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    nationalid bigint,
    firstname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(20) COLLATE pg_catalog."default",
    province character varying(50) COLLATE pg_catalog."default",
    district character varying(50) COLLATE pg_catalog."default",
    sector character varying(50) COLLATE pg_catalog."default",
    cell character varying(50) COLLATE pg_catalog."default",
    village character varying(50) COLLATE pg_catalog."default",
    personnel_id uuid NOT NULL,
    CONSTRAINT spouseaddress_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tokens
(
    id bigserial NOT NULL,
    token text COLLATE pg_catalog."default" NOT NULL,
    token_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    revoked boolean DEFAULT false,
    user_id bigint NOT NULL,
    CONSTRAINT tokens_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_role
(
    user_id bigint NOT NULL,
    role_id bigint NOT NULL,
    CONSTRAINT user_role_pkey PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default",
    phone_number character varying(255) COLLATE pg_catalog."default",
    account_non_expired boolean DEFAULT true,
    account_non_locked boolean DEFAULT true,
    credentials_non_expired boolean DEFAULT true,
    enabled boolean DEFAULT true,
    verified boolean DEFAULT false,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT uk_username UNIQUE (username)
);

ALTER TABLE IF EXISTS public.academicqualifications
    ADD CONSTRAINT academicqualifications_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS academicqualifications_personnel_id_key
    ON public.academicqualifications(personnel_id);


ALTER TABLE IF EXISTS public.coursesandtraining
    ADD CONSTRAINT coursesandtraining_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS coursesandtraining_personnel_id_key
    ON public.coursesandtraining(personnel_id);


ALTER TABLE IF EXISTS public.deploymentdata
    ADD CONSTRAINT deploymentdata_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.disciplinestatus
    ADD CONSTRAINT disciplinestatus_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.emergencycontact
    ADD CONSTRAINT emergencycontact_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS emergencycontact_personnel_id_key
    ON public.emergencycontact(personnel_id);


ALTER TABLE IF EXISTS public.medicaldata
    ADD CONSTRAINT medicaldata_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS medicaldata_personnel_id_key
    ON public.medicaldata(personnel_id);


ALTER TABLE IF EXISTS public.militaryinfo
    ADD CONSTRAINT militaryinfo_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS militaryinfo_personnel_id_key
    ON public.militaryinfo(personnel_id);


ALTER TABLE IF EXISTS public.nextofkinaddress
    ADD CONSTRAINT nextofkinaddress_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS nextofkinaddress_personnel_id_key
    ON public.nextofkinaddress(personnel_id);


ALTER TABLE IF EXISTS public.peacekeepingmission
    ADD CONSTRAINT peacekeepingmission_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.permission_role
    ADD CONSTRAINT fk_permission_role_permissions FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.permission_role
    ADD CONSTRAINT fk_permission_role_roles FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.promotionrecord
    ADD CONSTRAINT promotionrecord_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.residenceaddress
    ADD CONSTRAINT residenceaddress_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS residenceaddress_personnel_id_key
    ON public.residenceaddress(personnel_id);


ALTER TABLE IF EXISTS public.soldierskit
    ADD CONSTRAINT soldierskit_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS soldierskit_personnel_id_key
    ON public.soldierskit(personnel_id);


ALTER TABLE IF EXISTS public.spouseaddress
    ADD CONSTRAINT spouseaddress_personnel_id_fkey FOREIGN KEY (personnel_id)
    REFERENCES public.personnel (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS spouseaddress_personnel_id_key
    ON public.spouseaddress(personnel_id);


ALTER TABLE IF EXISTS public.tokens
    ADD CONSTRAINT fk_tokens_users FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_user_id_tokens
    ON public.tokens(user_id);


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT fk_user_role_roles FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT fk_user_role_users FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;